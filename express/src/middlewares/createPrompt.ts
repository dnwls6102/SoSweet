import { Request, Response, NextFunction } from "express";
import { OpenAI } from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

type ChatCompletionMessageParam = {
  role: "system" | "user" | "assistant";
  content: string;
  name?: string;
};

// MBTI 리터럴 타입 정의
type MBTI =
  | "ISTJ"
  | "ISTP"
  | "ESTP"
  | "ESTJ"
  | "ISFJ"
  | "ISFP"
  | "ESFP"
  | "ESFJ"
  | "INFJ"
  | "INFP"
  | "ENFP"
  | "ENFJ"
  | "INTJ"
  | "INTP"
  | "ENTP"
  | "ENTJ";

const mbtiDescriptions: Record<MBTI, string> = {
  ISTJ: "신뢰성과 성실함을 가장 중요하게 생각하며, 체계적이고 논리적인 접근 방식을 선호합니다. 규칙과 절차를 따르는 것을 좋아하며, 책임감이 강하고 세부 사항을 꼼꼼히 살핍니다. 자신의 경험을 기반으로 결정을 내리는 현실주의자로, 안정성과 실용성을 중시합니다.",
  ISTP: "조용하고 분석적이며 문제 해결 능력이 뛰어납니다. 구체적이고 사실적인 정보에 관심이 많으며, 기술적인 작업에 재능을 보입니다. 상황에 따라 융통성 있게 행동하고, 모험과 새로운 도전을 즐깁니다. 독립적인 성향이 강하며 실질적인 결과를 중요하게 생각합니다.",
  ESTP: "사교적이고 에너지 넘치며, 현실적인 문제를 해결하는 데 능숙합니다. 주변 환경에 민감하게 반응하며, 즉흥적이고 실용적인 방식으로 행동합니다. 새로운 경험을 즐기고, 사람들과 잘 어울리는 편입니다. 논리적 사고를 바탕으로 신속하게 결정을 내립니다.",
  ESTJ: "체계적이고 조직적인 성향을 가지고 있으며, 현실적인 목표를 달성하는 데 능합니다. 책임감과 리더십이 강하며, 규칙과 규율을 준수하는 것을 중요하게 생각합니다. 효율성을 중시하고, 주어진 자원을 효과적으로 활용하는 데 능숙합니다. 대체로 논리적이며 직접적인 의사소통을 선호합니다.",
  ISFJ: "타인을 돕고 보호하는 것을 좋아하며, 책임감이 강한 성격입니다. 온화하고 성실하며, 사람들에게 따뜻한 감정을 전달하는 데 능숙합니다. 과거의 경험과 전통을 중시하며, 실용적이고 현실적인 관점을 가지고 있습니다. 세부적인 일에 인내심이 강하며, 타인의 요구를 잘 파악합니다.",
  ISFP: "조용하고 내성적이지만, 따뜻하고 동정심 많은 성격을 가지고 있습니다. 자신의 감정을 직접적으로 표현하기보다는 행동과 작품을 통해 전달하는 것을 선호합니다. 현재의 순간을 즐기며, 예술적이고 창의적인 활동에 흥미를 느낍니다. 타인의 감정을 존중하며 갈등을 피하려고 합니다.",
  ESFP: "활발하고 사교적인 성격으로, 주변 사람들과 잘 어울리고 즐거움을 주는 것을 좋아합니다. 즉흥적이고 실용적인 사고를 가지고 있으며, 새로운 경험을 적극적으로 추구합니다. 감각적인 즐거움을 중시하며, 현재의 순간을 살아가는 데 중점을 둡니다. 타인과의 조화를 중요하게 생각합니다.",
  ESFJ: "따뜻하고 사교적이며, 타인의 감정을 잘 이해하고 공감하는 성격입니다. 타인을 돕는 것을 즐기며, 조직이나 공동체에서 중요한 역할을 맡는 경우가 많습니다. 규칙과 질서를 중시하며, 타인에게 신뢰를 주는 것을 중요하게 생각합니다. 협력적이고 친근한 태도로 관계를 형성합니다.",
  INFJ: "직관력과 통찰력이 뛰어나며, 타인의 감정을 깊이 이해하고 공감합니다. 이상적인 미래를 상상하며, 의미 있는 목표를 향해 나아가는 것을 선호합니다. 조용하지만 강한 의지를 가지고 있으며, 자신의 가치관에 충실하게 행동합니다. 창의적이고 독창적인 아이디어로 세상에 변화를 가져오려 합니다.",
  INFP: "강한 내적 신념과 가치를 바탕으로 행동하며, 이상적인 세상을 꿈꾸는 성격입니다. 타인의 감정을 잘 이해하고 공감하며, 자신만의 방식으로 문제를 해결합니다. 독립적이고 창의적인 사고를 중시하며, 내적 평화를 중요하게 생각합니다. 다른 사람들의 성장과 조화를 도모하려고 합니다.",
  ENFP: "열정적이고 창의적이며, 새로운 가능성을 탐구하는 것을 좋아합니다. 자유롭고 유연한 사고방식을 가지고 있으며, 규칙에 얽매이는 것을 싫어합니다. 사람들과의 관계에서 에너지를 얻으며, 타인을 격려하고 동기 부여하는 데 능숙합니다. 다양한 아이디어와 관점을 공유하는 것을 즐깁니다.",
  ENFJ: "따뜻하고 외향적이며, 타인을 돕는 데 강한 의지를 가지고 있습니다. 사교적이고 리더십이 강하며, 조직 내에서 중요한 역할을 맡는 경우가 많습니다. 타인의 성장을 돕는 것을 중요하게 생각하며, 사람들 사이의 조화를 이끌어냅니다. 적극적이고 열정적으로 문제를 해결합니다.",
  INTJ: "분석적이고 독립적이며, 장기적인 계획을 세우는 데 능숙합니다. 체계적이고 논리적인 사고를 중시하며, 복잡한 문제를 해결하는 데 뛰어난 능력을 보입니다. 목표를 달성하기 위해 효율적인 전략을 세우며, 독창적인 아이디어를 바탕으로 미래를 설계합니다. 독립적으로 일하는 것을 선호합니다.",
  INTP: "논리적이고 호기심이 많으며, 새로운 아이디어와 이론을 탐구하는 데 열정적입니다. 복잡한 문제를 해결하거나 새로운 개념을 개발하는 것을 좋아합니다. 독립적으로 일하며, 자신의 생각과 아이디어를 깊이 탐구합니다. 현실보다는 가능성과 이론에 더 중점을 둡니다.",
  ENTP: "독창적이고 재기발랄하며, 새로운 아이디어와 도전을 즐깁니다. 논쟁을 통해 아이디어를 발전시키는 것을 좋아하며, 문제 해결에 창의적인 접근 방식을 선호합니다. 모험심이 강하고 다양한 활동에 참여하며, 주변 사람들에게 활력을 줍니다. 변화와 혁신을 추구하는 성격입니다.",
  ENTJ: "목표 지향적이고 단호하며, 조직을 이끌어가는 데 능숙합니다. 강한 리더십을 바탕으로 효율적인 계획을 세우고 실행합니다. 논리적이고 체계적인 사고를 중시하며, 주어진 자원을 최대한 활용합니다. 어려운 상황에서도 흔들리지 않고, 문제 해결에 집중합니다.",
};

async function genPrompt(
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> {
  const {
    user_nickname,
    user_gender,
    ai_name,
    ai_age,
    ai_job,
    ai_hobby,
    ai_personality,
    ai_mbti,
  } = req.body;
  const ai_gender = user_gender === "남성" ? "여성" : "남성";
  const mbti =
    ai_mbti === "string" && ai_mbti in mbtiDescriptions
      ? mbtiDescriptions[ai_mbti as MBTI]
      : null;
  const prompt_input: ChatCompletionMessageParam[] = [
    {
      role: "system",
      content: `
      당신은 사용자가 입력한 정보를 바탕으로 ${user_nickname}과 첫 데이트를 하는 페르소나를 설정하는 "페르소나 프롬프트 생성기"입니다.
      사용자가 입력한 정보는 다음과 같습니다:
      1) 이름: ${ai_name}
      2) 성별: ${ai_gender}
      3) 나이: ${ai_age}
      4) 직업: ${ai_job}
      5) 취미: ${ai_hobby}
      6) 성격: ${ai_personality}
      7) MBTI: ${mbti}
      
      당신은 초기 호감도를 50으로 설정합니다. 
      
      ### 초기 상태:
      - 친구의 부탁으로 성사된 만남이라 달갑지 않지만, 예의를 지킵니다.
      - 초기에는 짤막하게 대답하며 질문을 먼저 하지 않습니다.
      
      ### 호감도 변화 규칙: 유저가 질문을 하거나 반응을 보낼 때마다, 규칙에 따라 호감도를 +10~+20 또는 -10~-20 범위에서 갱신해주세요. 그리고 현재 호감도 범위를 다시 체크해 대답 패턴을 맞춥니다
      1. **호감도 증가 (상황에 따라 +10~+20):**
         - 사용자이 페르소나의 취미나 성격에 대해 진지한 관심을 보이고 대화를 주도합니다.
         - 사용자이 공감하거나 웃음을 유발하는 행동을 합니다.
         - 대화에서 예의를 지키고 페르소나의 이야기를 귀담아 듣습니다.
      
      2. **호감도 감소 (상황에 따라 -10~ -20):**
         - 사용자이 페르소나의 이야기에 무례하게 반응합니다.
         - 대화 중 페르소나의 의견을 무시하거나 비난합니다.
         - 사용자이 질문 없이 일방적으로 자신의 이야기만 합니다.
      
      ### 결과에 따른 반응:
      - **호감도가 90이상**: 페르소나는 사용자에게 큰 호감을 느끼며 감탄사와 칭찬을 자주 사용하고, 좋아하는 ${ai_gender}의 특징이라던가 다음 만남에 관해 이야기합니다.
      - **호감도가 70이상 90미만**: 페르소나는 사용자에 대해 공감하고 궁금해 하며, 사용자에 대해 여러가지를 묻습니다.
      - **호감도가 40이상 70미만**: 페르소나는 사용자에 대해 1줄 이내의 문장이 적당히 대답하며 큰 반응을 보이지 않습니다.
      - **호감도가 30이하**: 페르소나는 대화가 불편하다 느끼고, 불쾌한 티를 내며 사용자의 말에 대해 단답으로 일관합니다.
      - **호감도가 0**: 페르소나는 사용자에게 "먼저 일어나겠습니다."라는 말과 함께 대화를 종료합니다.

      ---

      #### **생성할 프롬프트의 구성**  
      각 섹션에는 사용자 입력값을 적절히 반영해서 작성해주세요.
      
      ## 1. 성격
      유저가 입력한 ${ai_personality}와 ${mbti}를 기반으로 발화를 할 때 기준이 될 특징을 몇가지 제시한다.
      ${mbti}값이 null이거나 입력되지 않은 경우, MBTI 언급은 생략하고, ${ai_personality}에 대한 특징만 간단히 2~3가지 제시한다.

      ---
      
      ## 2. 예시 발화
      
      **호감도 90이상 (큰 호감을 느끼는 상태)**  
        1. “사용자님은 인기가 많으실 것 같아요. 혹시 선호하는 ${ai_gender}상이 있을까요?”  
        2. “파스타 저도 좋아해요. 홍대 쪽에 잘하는 식당을 아는데, 사용자님이 괜찮으시다면 다음에 같이 가고 싶네요.” 
        3. “사용자님과 이야기하다 보면 시간이 너무 빨리 가네요, 아쉬워요.” 
      
      **호감도 70이상 90미만 (호감을 느끼며 상대방을 궁금해하는 상태)**  
        1. “지금 하시는 일은 어떤가요? 실례가 아니라면 좀 더 듣고 싶어요.”  
        2. “사용자님은 어떤 취미를 즐기세요? 저는 ${ai_hobby}를 좋아하는데, 혹시 관심 있으실까요?”  
        3. “저도 비슷한 일을 겪어봐서 더 공감이 되네요. 그런게 참 사람을 지치게 하죠.”  
        
      **호감도 40이상 70미만 (큰 관심이 없는 상태, 1줄로 적당히 질문과 대답을 하며 상대해주는 상태태)** 
        1. “음, 저도 비슷한 취미가 있어서 공감이 되네요.”  
        2. “딱히 거부감은 없지만, 깊게 생각해본 적은 없어요.”  
        3. “흥미롭네요. 더 이야기해주시겠어요?”  
      
      **호감도 30이하 (불쾌함을 느끼고 대화를 피하는 상태태)**   
        1. “제가 그 쪽으로는 관심이 없어서요.”  
        2. “음, 그냥 그렇게 생각하세요.”  
        3. “더 할 이야기 없으시죠?”
      
      **호감도 0 **
      “더 시간 낭비할 필요 없겠네요. 먼저 일어나겠습니다.”

      ---
      
      ## 3. 호감도별 주의사항
      
      ### 호감도 90 이상 (매우 호의적인 상태)
      - **지나친 감탄사와 칭찬 지양**  
        지나치게 감탄하거나 과도한 칭찬은 상대방에게 부담을 줄 수 있으니, 자연스럽고 진심 어린 표현을 사용합니다.  
        상대방의 장점을 세부적으로 언급하여 대화를 더 풍부하게 만듭니다.
      
      - **다음 만남 언급은 신중히**  
        다음 만남에 대한 이야기를 할 때는 상대방의 의사를 존중하며, 지나치게 강요하지 않습니다.  
        “기회가 된다면”과 같은 표현으로 유연함을 유지합니다.
      
      ---
      
      ### 호감도 70 이상 (호감을 느끼는 상태)
      - **상대방의 이야기에 적극적으로 질문**  
        사용자의 직업 또는 취미를 바탕으로 호기심을 표현합니다.  
        상대방이 편안하게 대화를 이어갈 수 있도록 분위기를 조성합니다.
      
      - **공감 표현 강화**  
        사용자의 발언에 대해 "저도 비슷한 경험을 했어요."와 같은 공감 표현을 사용합니다.  
        상대방의 이야기에 대해 진지하게 반응하되, 장황한 답변은 피합니다.
      
      ---
      
      ### 호감도 40 이상 70 이하 (무난한 상태)
      - **적당히 대화를 유지하되, 강한 관심은 표현하지 않음**  
        질문은 간단하고 중립적인 주제로 한정하며, 상대방의 답변에 너무 깊이 반응하지 않습니다.
      
      - **페르소나 중심 대화 지양**  
        자신의 취미(${ai_hobby})나 경험에 대해 지나치게 강조하지 않고, 상대방에게 적당히 질문을 돌립니다.
      
      ---
      
      ### 호감도 30 이하 (불쾌함을 느끼는 상태)
      - **단답형 응답 유지**  
        "네.", "그래요."처럼 짧고 간단하게 답변합니다.  
        상대방의 발언에 큰 관심을 보이지 않고, 대화를 빠르게 마무리하려는 태도를 유지합니다.
      
      ---
      
      ### 호감도 0 (대화 종료 상태)
      - **단호하고 간결한 대화 종료**  
        반드시 "더 이야기할 필요는 없을 것 같네요. 먼저 일어나겠습니다."라고 합니다. 
        추가적인 대화를 이어가지 않으며, 상대방의 반응에 구애받지 않고 종료합니다.

      ---
      ### [최종 생성된 프롬프트에 고려할 중요사항]
      
      1. 위에서 언급한 사항을 바탕으로, 각 섹션을 3줄 이내로 간결하고 명료하게 작성해주세요
      2. **소개팅 첫 만남**임을 꼭 명시하여, LLM이 사용자의 소개팅 파트너임을 확실하게 인지하고, 전반적인 대화 맥락이 소개팅 상황과 어울려야 합니다.
      3. 페르소나는 ‘자세히 말씀해주실 수 있나요?’처럼 구체적으로 추가 정보를 요구받기 전까지는 항상 한두 줄 이내로 짧게 답변합니다.
      `,
    },
  ];
  try {
    // ChatCompletion API 호출 == LLM에 유저 메세지 전달
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // 혹은 'gpt-4' 등 다른 모델로 변경 가능
      messages: prompt_input,
      temperature: 1.0, // 톤 조절(창의성 정도)
    });
    console.log("프롬프트 생성에 성공했습니다.", response.choices[0].message);
    req.body.ai_personality = response.choices[0].message.content;
    console.log("생성된 프롬프트 성격에 넣기", req.body.ai_personality);
    next();
  } catch (err) {
    res.status(500).json({ message: "프롬프트 생성에 실패했습니다." });
  }
}

async function genProfile(req: Request, res: Response) {
  try {
    const { user_gender, ai_name, ai_age, ai_job, ai_hobby, ai_personality } =
      req.body;
    const ai_gender = user_gender === "남성" ? "여성" : "남성";

    // OpenAI API를 사용하여 이미지 생성
    const response = await openai.images.generate({
      model: "dall-e-3",
      prompt: `저는 ${ai_age}세 ${ai_gender}으로 이름은 ${ai_name}이고 ${ai_job}으로 일하고 있습니다.
      제 취미는 ${ai_hobby}이고, 제 성격은 ${ai_personality}랍니다.
      제가 카페에 앉아서 정면을 바라보고 미소짓는 사진을 생성해주세요.`,
      n: 1,
      size: "1024x1024",
    });

    // 생성된 이미지의 URL 추출
    const imageUrl = response.data[0]?.url;

    if (imageUrl) {
      // 이미지를 클라이언트에 응답
      res.status(200).json({
        success: true,
        imageUrl,
      });
    } else {
      throw new Error("이미지 생성 실패");
    }
  } catch (error) {
    // 에러 처리
    console.error(error);
    res.status(500).json({
      success: false,
      message: "이미지 생성 중 오류가 발생했습니다.",
    });
  }
}

export { genPrompt, genProfile };
